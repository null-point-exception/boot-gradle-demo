spring:
  profiles:
    active: dev
  output:
    ansi:
      enabled: detect #配置输出console的ide中的配色，并没有什么用
  jackson:
    default-property-inclusion: non_null
    date-format: yyyy-MM-dd HH:mm:ss
    time-zone: GMT+8
    serialization:
      # 不返回时间戳，如果为 true 返回时间戳，如果这三行同时存在，以第3行为准即返回时间戳
      write-dates-as-timestamps: false

swagger:
  # 部署时间yyyy-MM-dd HH:mm:ss
  publishDate:
  enable: false
  active: ${spring.profiles.active}
  title: springboot+gradle demo
  description: 技术支持：SaltzmanAlaric（一方通行）
  termsOfServiceUrl: https://github.com/SaltzmanAlaric/
  version: 1.0

# mybatis-plus
mybatis-plus:
  #外部化xml配置
  #config-location: classpath:mybatis-config.xml
  #指定外部化 MyBatis Properties 配置，通过该配置可以抽离配置，实现不同环境的配置部署
  #configuration-properties: classpath:mybatis/config.properties
  #xml扫描，多个目录用逗号或者分号分隔（告诉 Mapper 所对应的 XML 文件位置）
  mapper-locations: classpath:/mapper/*Mapper.xml
  #MyBaits 别名包扫描路径，通过该属性可以给包中的类注册别名，多个package用逗号或者分号分隔
  type-aliases-package: com.practice.bean.entity
  #如果配置了该属性，则仅仅会扫描路径下以该类作为父类的域对象
  #type-aliases-super-type: java.lang.Object
  #枚举类 扫描路径，如果配置了该属性，会将路径下的枚举类进行注入，让实体类字段能够简单快捷的使用枚举属性
  #type-enums-package: com.baomidou.mybatisplus.samples.quickstart.enums
  #项目启动会检查xml配置存在(只在开发时候打开)
  check-config-location: true
  configuration:
    # 是否开启自动驼峰命名规则（camel case）映射，即从经典数据库列名 A_COLUMN（下划线命名） 到经典 Java 属性名 aColumn（驼峰命名） 的类似映射
    map-underscore-to-camel-case: true
    # 全局地开启或关闭配置文件中的所有映射器已经配置的任何缓存，默认为 true
    cache-enabled: false
    #懒加载
    #aggressive-lazy-loading: true
    #NONE：不启用自动映射 PARTIAL：只对非嵌套的 resultMap 进行自动映射 FULL：对所有的 resultMap 都进行自动映射
    #auto-mapping-behavior: partial
    #NONE：不做任何处理 (默认值)WARNING：以日志的形式打印相关警告信息 FAILING：当作映射失败处理，并抛出异常和详细信息
    #auto-mapping-unknown-column-behavior: none
    #如果查询结果中包含空值的列，则 MyBatis 在映射的时候，不会映射这个字段
    call-setters-on-nulls: true
    # 这个配置会将执行的sql打印出来，在开发或测试的时候可以用
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
    interceptors:
  global-config:
    db-config:
      # 表名下划线命名默认true
      table-underline: true
      # 主键类型
      id-type: UUID
      #是否开启大写命名，默认不开启
      #capital-mode: false
      #逻辑已删除值,(逻辑删除下有效) 需要注入逻辑策略LogicSqlInjector 以@Bean方式注入
      logic-not-delete-value: 0
      #逻辑未删除值,(逻辑删除下有效)
      logic-delete-value: 1

# pagehelper分页配置
pagehelper:
  # dialect:
  # 分页插件会自动检测当前的数据库链接，自动选择合适的分页方式（可以不设置）
  #helper-dialect: mysql
  # 上面数据库设置后，下面的设置为true不会改变上面的结果（默认为true）
  #auto-dialect: true
  # 默认值为 false，当该参数设置为 true 时，如果 pageSize=0 或者 RowBounds.limit = 0 就会查询出全部的结果（相当于没有执行分页查询，但是返回结果仍然是 Page 类型）。
  page-size-zero: false
  # 合法性，即纠错机制，配置reasonable为 true，这时如果 pageNum <= 0 会查询第一页，如果 pageNum > pages 会查询最后一页。
  reasonable: true
  # 默认值为 false，该参数对使用 RowBounds 作为分页参数时有效。（一般用不着）
  offset-as-page-num: false
  # 默认值为 false，RowBounds是否进行count查询（一般用不着）
  row-bounds-with-count: false
  #params:
  #support-methods-arguments:
  # 默认值为 false。设置为 true 时，允许在运行时根据多数据源自动识别对应方言的分页，和params配合使用，具体可以看下面的讲解。
  auto-runtime-dialect: false
  # 与auto-runtime-dialect配合使用，默认值为true。当使用运行时动态数据源或没有设置 helperDialect 属性自动获取数据库类型时，会自动获取一个数据库连接， 通过该属性来设置是否关闭获取的这个连接，默认true关闭，设置为 false 后，不会关闭获取的连接，这个参数的设置要根据自己选择的数据源来决定。
  close-conn: true
  # 是否执行count查询，设置为false时，total会为-1
  default-count: true
  # 允许配置自定义实现的别名，可以用于根据JDBCURL自动获取对应实现，允许通过此种方式覆盖已有的实现，配置示例如(多个配置用分号;隔开)：
  #dialect-alias:


logging:
  level:
    com.practice.mapper: debug
  pattern:
    console: "%d - %msg%n"
  config: classpath:logback-spring.xml